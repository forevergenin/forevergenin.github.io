<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on forevergenin</title>
    <link>https://www.forevergenin.com/tags/linux/</link>
    <description>Recent content in linux on forevergenin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Nov 2017 15:35:45 +0530</lastBuildDate><atom:link href="https://www.forevergenin.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bootstrapping CentOS rootfs for use with chroots/containers</title>
      <link>https://www.forevergenin.com/posts/linux/bootstrapping-centos-rootfs/</link>
      <pubDate>Thu, 16 Nov 2017 15:35:45 +0530</pubDate>
      
      <guid>https://www.forevergenin.com/posts/linux/bootstrapping-centos-rootfs/</guid>
      <description>We will see how to generate a rootfs tarball for redhat based system. Since we are targetting redhat based system, I am going to use debian based system (Ubuntu 17.10 64-bit - latest at the time of writing this post) as my host. We will generate rootfs tarball for CentOS 7 64-bit.
The below mentioned steps are validated on Ubuntu 17.10 desktop installation.
Lets get started As usual the first step, install the required dependecy packages which in our case is yum.
sudo apt install yum Second, will prepare the required directory structure. In our example ~/work will be our working directory and we will install the CentOS 7 roofs in inside of work in a directory named centos7.</description>
    </item>
    
    <item>
      <title>Bootstrapping a debian rootfs for use with chroots/containers</title>
      <link>https://www.forevergenin.com/posts/linux/bootstrapping-debian-rootfs/</link>
      <pubDate>Wed, 20 Sep 2017 14:17:48 +0530</pubDate>
      
      <guid>https://www.forevergenin.com/posts/linux/bootstrapping-debian-rootfs/</guid>
      <description>The aim this time is to setup a base rootfs for Ubuntu/Debian distro which can be used for setting up a chroot jail or to create a docker container base image. This blog is based on a earlier blog which I have written but forgot to publish around June, 2012.
The below mentioned steps are validated on Fedora 25 Workstation installation.
For setting up a debian based rootfs we need a tool called debootstrap. It&amp;rsquo;s available as part of EPEL repository for Fedora and other Redhat based distros. Make sure to always install the latest version of debootstrap.
sudo dnf install debootstrap To setup a base rootfs you need to decide on the version of debian distro (wheezy, jessie, buster), the target architecture (i386 or amd64) and what kind of variant you want to setup.</description>
    </item>
    
    <item>
      <title>Cross Compilation Checklist</title>
      <link>https://www.forevergenin.com/posts/linux/cross-compilation-checklist/</link>
      <pubDate>Thu, 13 Oct 2016 16:19:56 +0530</pubDate>
      
      <guid>https://www.forevergenin.com/posts/linux/cross-compilation-checklist/</guid>
      <description>This check-list tries to document the obvious, to reduce the time spent fixing toolchain related errors while cross compiling.
Export the toolchain location to the PATH environment variable Set proper --sysroot for CFLAGS, CXXFLAGS and LDFLAGS Set proper PKG_CONFIG_SYSROOT_DIR, PKG_CONFIG_PATH and PKG_CONFIG_LIBDIR for pkg-config tool. This is important for build scripts which use pkg-config to determine the proper build flags. Note: Use pkg-config &amp;gt;= 0.26 . There is bug with previous versions of pkg-config which ignores the PKG_CONFIG_SYSROOT_DIR value
A sample configuration export __CB_TOOLCHAIN_DIR=/opt/cross-toolchain export __CB_TOOLCHAIN_SYSROOT=${__CB_TOOLCHAIN_DIR}/sysroot export PATH=${__CB_TOOLCHAIN_DIR}/bin:${PATH} export PKG_CONFIG_SYSROOT_DIR=${__CB_TOOLCHAIN_SYSROOT} export PKG_CONFIG_PATH=${PKG_CONFIG_SYSROOT_DIR}/usr/lib/pkgconfig export PKG_CONFIG_LIBDIR=${PKG_CONFIG_SYSROOT_DIR}/usr/lib/pkgconfig export CFLAGS+=&amp;quot;--sysroot=${__CB_TOOLCHAIN_SYSROOT} &amp;quot; export CXXFLAGS+=&amp;quot;--sysroot=${__CB_TOOLCHAIN_SYSROOT} &amp;quot; export LDFLAGS+=&amp;quot;--sysroot=${__CB_TOOLCHAIN_SYSROOT} &amp;quot; #export PKG_CONFIG_DEBUG_SPEW=true # this one is for debugging pkg-config Note : Need to update the post on how to cross compile packages which use autoconf tools</description>
    </item>
    
    <item>
      <title>Distro independent Java development environment setup</title>
      <link>https://www.forevergenin.com/posts/linux/distro-independent-java-development-environment-setup/</link>
      <pubDate>Wed, 01 Jun 2016 13:54:56 +0530</pubDate>
      
      <guid>https://www.forevergenin.com/posts/linux/distro-independent-java-development-environment-setup/</guid>
      <description>Until few years back setting up Java development environment based on Sun/Oracle JDK was fairly a simple task. Since most of the linux distributions included Oracle/Sun JDK as part of their default package repository (here read as Canonical&amp;rsquo;s partner repository ;-)) it was as easy as installing any other core linux pacakge. But in recent times due to license restrictions Oracle JDK is not included in any of the linux distribution repositories by default. Setting up Java development environment manually from scratch on linux has become a tedious job (though still easier doing tha on Microsoft Windows). Nowadays I avoid doing it, given a chance to use a preconfigured virtual machines or chroot tar balls - created specifically for development/build requirements.</description>
    </item>
    
  </channel>
</rss>
